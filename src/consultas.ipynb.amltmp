{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Importa las bibliotecas necesarias.**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import psycopg2\n",
        "from psycopg2 import Error # Importar la clase Error\n",
        "from psycopg2 import sql\n",
        "import pandas as pd"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1737146954549
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Función para ejecutar una consulta SQL**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Función para ejecutar una consulta SQL\n",
        "def execute_query(conn, query, params=None):\n",
        "    \"\"\"\n",
        "    Ejecuta una consulta SQL con manejo de errores y soporte para parámetros.\n",
        "    \"\"\"\n",
        "    try:\n",
        "        with conn.cursor() as cursor:\n",
        "            cursor.execute(query, params)  # Ejecuta la consulta con o sin parámetros\n",
        "            conn.commit()  # Confirma los cambios si no hay errores\n",
        "            print(\"Query executed successfully\")\n",
        "            if cursor.description:\n",
        "                # Si la consulta devuelve resultados, obtén los datos\n",
        "                return cursor.fetchall()\n",
        "    except psycopg2.Error as err:\n",
        "        conn.rollback()  # Restaura la transacción si ocurre un error\n",
        "        print(f\"Error executing query: {err}\")\n",
        "        return None  # Devuelve None en caso de error\n"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1737146954681
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Conexión a la base de datos de PostgreSQL data_powergen**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Conexión a la base de datos\n",
        "def create_database_connection():\n",
        "    conn = None\n",
        "    try:\n",
        "        conn = psycopg2.connect(\n",
        "            database=\"data_powergen\", \n",
        "            user=\"datafundamental_owner\", \n",
        "            password=\"uozci0wQGpA6\", \n",
        "            host=\"ep-solitary-pond-a2p3evpo.eu-central-1.aws.neon.tech\", \n",
        "            sslmode=\"require\", \n",
        "            port=5432\n",
        "        )\n",
        "        print(\"Connected to 'data_powergen' successfully.\")\n",
        "    except psycopg2.Error as err:\n",
        "        print(f\"Error: {err}\")\n",
        "    return conn"
      ],
      "outputs": [],
      "execution_count": 3,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1737146954839
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Crea la tabla resultados_join y la lista de consultas a ejecutar.**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Lista de consultas a ejecutar\n",
        "sql_queries = {\n",
        "    \"create_resultados_join\": \"\"\"\n",
        "        CREATE TABLE IF NOT EXISTS resultados_join AS\n",
        "        SELECT \n",
        "            h.id_equipo,\n",
        "            COUNT(h.id_orden) AS total_ordenes_mantenimiento,\n",
        "            AVG(r.temperatura_c) AS promedio_temperatura,\n",
        "            AVG(r.vibracion_mm_s) AS promedio_vibracion,\n",
        "            AVG(r.presion_bar) AS promedio_presion\n",
        "        FROM historicos_ordenes h\n",
        "        LEFT JOIN registros_condiciones r\n",
        "        ON h.id_equipo = r.id_equipo\n",
        "        GROUP BY h.id_equipo;\n",
        "    \"\"\",\n",
        "    \"total_ordenes_por_equipo\": \"\"\"\n",
        "        SELECT id_equipo, COUNT(id_orden) AS total_ordenes\n",
        "        FROM historicos_ordenes\n",
        "        GROUP BY id_equipo;\n",
        "    \"\"\",\n",
        "    \"duracion_promedio_vida_util\": \"\"\"\n",
        "        SELECT AVG(vida_util_anios) AS duracion_promedio_vida_util\n",
        "        FROM caracteristicas_equipos;\n",
        "    \"\"\",\n",
        "    \"costo_promedio_correctivo\": \"\"\"\n",
        "        SELECT AVG(costo_mantenimiento) AS costo_promedio_correctivo\n",
        "        FROM historicos_ordenes\n",
        "        WHERE tipo_mantenimiento = 'Correctivo';\n",
        "    \"\"\",\n",
        "    \"equipo_mas_fallas\": \"\"\"\n",
        "        SELECT id_equipo, COUNT(id_orden) AS total_correctivo\n",
        "        FROM historicos_ordenes\n",
        "        WHERE tipo_mantenimiento = 'Correctivo'\n",
        "        GROUP BY id_equipo\n",
        "        ORDER BY total_correctivo DESC\n",
        "        LIMIT 1;\n",
        "    \"\"\",\n",
        "    \"temperatura_resumen\": \"\"\"\n",
        "        SELECT id_equipo, AVG(temperatura_c) AS promedio_temp, MAX(temperatura_c) AS max_temp\n",
        "        FROM registros_condiciones\n",
        "        GROUP BY id_equipo;\n",
        "    \"\"\",\n",
        "    \"ordenes_correctivas_equipo\": \"\"\"\n",
        "        SELECT id_orden, id_equipo, costo_mantenimiento, tiempo_reparacion_horas\n",
        "        FROM historicos_ordenes\n",
        "        WHERE tipo_mantenimiento = 'Correctivo' AND id_equipo = %s;\n",
        "    \"\"\",\n",
        "    \"dias_vibracion_temperatura\": \"\"\"\n",
        "        SELECT *\n",
        "        FROM registros_condiciones\n",
        "        WHERE vibracion_mm_s > 3.0 AND temperatura_c > 60;\n",
        "    \"\"\",\n",
        "    \"tiempo_promedio_mantenimiento\": \"\"\"\n",
        "        SELECT id_equipo, AVG(EXTRACT(EPOCH FROM AGE(fecha, LAG(fecha) OVER (PARTITION BY id_equipo ORDER BY fecha)))/3600) AS tiempo_promedio_horas\n",
        "        FROM historicos_ordenes\n",
        "        GROUP BY id_equipo;\n",
        "    \"\"\",\n",
        "    \"suma_horas_acumuladas\": \"\"\"\n",
        "        SELECT id_equipo, SUM(horas_acumuladas) AS total_horas_acumuladas\n",
        "        FROM registros_condiciones\n",
        "        GROUP BY id_equipo;\n",
        "    \"\"\"\n",
        "}\n",
        "\n",
        "\n",
        "sql_queries\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/plain": "{'create_resultados_join': '\\n        CREATE TABLE IF NOT EXISTS resultados_join AS\\n        SELECT \\n            h.id_equipo,\\n            COUNT(h.id_orden) AS total_ordenes_mantenimiento,\\n            AVG(r.temperatura_c) AS promedio_temperatura,\\n            AVG(r.vibracion_mm_s) AS promedio_vibracion,\\n            AVG(r.presion_bar) AS promedio_presion\\n        FROM historicos_ordenes h\\n        LEFT JOIN registros_condiciones r\\n        ON h.id_equipo = r.id_equipo\\n        GROUP BY h.id_equipo;\\n    ',\n 'total_ordenes_por_equipo': '\\n        SELECT id_equipo, COUNT(id_orden) AS total_ordenes\\n        FROM historicos_ordenes\\n        GROUP BY id_equipo;\\n    ',\n 'duracion_promedio_vida_util': '\\n        SELECT AVG(vida_util_anios) AS duracion_promedio_vida_util\\n        FROM caracteristicas_equipos;\\n    ',\n 'costo_promedio_correctivo': \"\\n        SELECT AVG(costo_mantenimiento) AS costo_promedio_correctivo\\n        FROM historicos_ordenes\\n        WHERE tipo_mantenimiento = 'Correctivo';\\n    \",\n 'equipo_mas_fallas': \"\\n        SELECT id_equipo, COUNT(id_orden) AS total_correctivo\\n        FROM historicos_ordenes\\n        WHERE tipo_mantenimiento = 'Correctivo'\\n        GROUP BY id_equipo\\n        ORDER BY total_correctivo DESC\\n        LIMIT 1;\\n    \",\n 'temperatura_resumen': '\\n        SELECT id_equipo, AVG(temperatura_c) AS promedio_temp, MAX(temperatura_c) AS max_temp\\n        FROM registros_condiciones\\n        GROUP BY id_equipo;\\n    ',\n 'ordenes_correctivas_equipo': \"\\n        SELECT id_orden, id_equipo, costo_mantenimiento, tiempo_reparacion_horas\\n        FROM historicos_ordenes\\n        WHERE tipo_mantenimiento = 'Correctivo' AND id_equipo = %s;\\n    \",\n 'dias_vibracion_temperatura': '\\n        SELECT *\\n        FROM registros_condiciones\\n        WHERE vibracion_mm_s > 3.0 AND temperatura_c > 60;\\n    ',\n 'tiempo_promedio_mantenimiento': '\\n        SELECT id_equipo, AVG(EXTRACT(EPOCH FROM AGE(fecha, LAG(fecha) OVER (PARTITION BY id_equipo ORDER BY fecha)))/3600) AS tiempo_promedio_horas\\n        FROM historicos_ordenes\\n        GROUP BY id_equipo;\\n    ',\n 'suma_horas_acumuladas': '\\n        SELECT id_equipo, SUM(horas_acumuladas) AS total_horas_acumuladas\\n        FROM registros_condiciones\\n        GROUP BY id_equipo;\\n    '}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 4,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1737146955180
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejecuta el código (conectar y consultar)**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Ejecución del script\n",
        "if __name__ == \"__main__\":\n",
        "    # Conectar a la base de datos\n",
        "    db_conn = create_database_connection()\n",
        "\n",
        "    # Ejecutar cada consulta\n",
        "    for query_name, query in sql_queries.items():\n",
        "        print(f\"Executing query: {query_name}\")\n",
        "        result = execute_query(db_conn, query)\n",
        "        if result:  # Si la consulta devuelve resultados, imprimirlos\n",
        "            print(result)\n",
        "\n",
        "    # Cerrar la conexión\n",
        "    db_conn.close()\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Connected to 'data_powergen' successfully.\nExecuting query: create_resultados_join\nQuery executed successfully\nExecuting query: total_ordenes_por_equipo\nQuery executed successfully\n[('E005', 502), ('E013', 496), ('E011', 483), ('E019', 516), ('E001', 487), ('E003', 506), ('E020', 516), ('E015', 495), ('E016', 478), ('E006', 473), ('E010', 537), ('E008', 531), ('E014', 464), ('E007', 485), ('E004', 539), ('E017', 532), ('E018', 498), ('E009', 507), ('E012', 470), ('E002', 485)]\nExecuting query: duracion_promedio_vida_util\nQuery executed successfully\n[(Decimal('19.0000000000000000'),)]\nExecuting query: costo_promedio_correctivo\nQuery executed successfully\n[(Decimal('2711.4088353413654618'),)]\nExecuting query: equipo_mas_fallas\nQuery executed successfully\n[('E010', 272)]\nExecuting query: temperatura_resumen\nQuery executed successfully\n[('E005', Decimal('50.4801952277657267'), Decimal('80.0')), ('E013', Decimal('51.2583956043956044'), Decimal('80.0')), ('E011', Decimal('49.4766952789699571'), Decimal('79.99')), ('E019', Decimal('49.9776872246696035'), Decimal('79.94')), ('E001', Decimal('49.8715505617977528'), Decimal('79.92')), ('E003', Decimal('51.3045628997867804'), Decimal('79.99')), ('E020', Decimal('49.8497505668934240'), Decimal('78.92')), ('E016', Decimal('50.5321145374449339'), Decimal('79.91')), ('E015', Decimal('50.8351619870410367'), Decimal('79.97')), ('E006', Decimal('49.6764120370370370'), Decimal('80.0')), ('E010', Decimal('49.4946860986547085'), Decimal('79.89')), ('E008', Decimal('50.4663655913978495'), Decimal('79.92')), ('E014', Decimal('49.7002795698924731'), Decimal('79.84')), ('E007', Decimal('50.6467458432304038'), Decimal('79.92')), ('E004', Decimal('48.8249372384937238'), Decimal('79.96')), ('E018', Decimal('49.9259414225941423'), Decimal('79.96')), ('E017', Decimal('51.2141491841491841'), Decimal('79.71')), ('E002', Decimal('48.0370257611241218'), Decimal('79.97')), ('E012', Decimal('50.8509813084112150'), Decimal('79.9')), ('E009', Decimal('50.5166666666666667'), Decimal('79.98'))]\nExecuting query: ordenes_correctivas_equipo\nError executing query: syntax error at or near \"%\"\nLINE 4: ... WHERE tipo_mantenimiento = 'Correctivo' AND id_equipo = %s;\n                                                                    ^\n\nExecuting query: dias_vibracion_temperatura\nError executing query: current transaction is aborted, commands ignored until end of transaction block\n\nExecuting query: tiempo_promedio_mantenimiento\nError executing query: current transaction is aborted, commands ignored until end of transaction block\n\nExecuting query: suma_horas_acumuladas\nError executing query: current transaction is aborted, commands ignored until end of transaction block\n\n"
        }
      ],
      "execution_count": 5,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1737146960664
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.11",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}