{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Importa las bibliotecas necesarias.**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import psycopg2\n",
        "from psycopg2 import Error # Importar la clase Error\n",
        "from psycopg2 import sql\n",
        "import pandas as pd"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Función para ejecutar una consulta SQL**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Función para ejecutar una consulta SQL\n",
        "def execute_query(conn, query, params=None):\n",
        "    try:\n",
        "        with conn.cursor() as cursor:\n",
        "            cursor.execute(query, params)\n",
        "            conn.commit()\n",
        "            print(\"Query executed successfully\")\n",
        "            if cursor.description:\n",
        "                # Si la consulta devuelve resultados, obtenerlos\n",
        "                result = cursor.fetchall()\n",
        "                return result\n",
        "    except psycopg2.Error as err:\n",
        "        print(f\"Error executing query: {err}\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Conexión a la base de datos de PostgreSQL data_powergen**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Conexión a la base de datos\n",
        "def create_database_connection():\n",
        "    conn = None\n",
        "    try:\n",
        "        conn = psycopg2.connect(\n",
        "            database=\"data_powergen\", \n",
        "            user=\"datafundamental_owner\", \n",
        "            password=\"uozci0wQGpA6\", \n",
        "            host=\"ep-solitary-pond-a2p3evpo.eu-central-1.aws.neon.tech\", \n",
        "            sslmode=\"require\", \n",
        "            port=5432\n",
        "        )\n",
        "        print(\"Connected to 'data_powergen' successfully.\")\n",
        "    except psycopg2.Error as err:\n",
        "        print(f\"Error: {err}\")\n",
        "    return conn"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Crea la tabla resultados_join y Lista de consultas a ejecutar**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Lista de consultas a ejecutar\n",
        "sql_queries = {\n",
        "    \"create_resultados_join\": \"\"\"\n",
        "        CREATE TABLE IF NOT EXISTS resultados_join AS\n",
        "        SELECT \n",
        "            h.id_equipo,\n",
        "            COUNT(h.id_orden) AS total_ordenes_mantenimiento,\n",
        "            AVG(r.temperatura_c) AS promedio_temperatura,\n",
        "            AVG(r.vibracion_mm_s) AS promedio_vibracion,\n",
        "            AVG(r.presion_bar) AS promedio_presion\n",
        "        FROM historicos_ordenes h\n",
        "        LEFT JOIN registros_condiciones r\n",
        "        ON h.id_equipo = r.id_equipo\n",
        "        GROUP BY h.id_equipo;\n",
        "    \"\"\",\n",
        "    \"total_ordenes_por_equipo\": \"\"\"\n",
        "        SELECT id_equipo, COUNT(id_orden) AS total_ordenes\n",
        "        FROM historicos_ordenes\n",
        "        GROUP BY id_equipo;\n",
        "    \"\"\",\n",
        "    \"duracion_promedio_vida_util\": \"\"\"\n",
        "        SELECT AVG(vida_util_anios) AS duracion_promedio_vida_util\n",
        "        FROM caracteristicas_equipos;\n",
        "    \"\"\",\n",
        "    \"costo_promedio_correctivo\": \"\"\"\n",
        "        SELECT AVG(costo_mantenimiento) AS costo_promedio_correctivo\n",
        "        FROM historicos_ordenes\n",
        "        WHERE tipo_mantenimiento = 'Correctivo';\n",
        "    \"\"\",\n",
        "    \"equipo_mas_fallas\": \"\"\"\n",
        "        SELECT id_equipo, COUNT(id_orden) AS total_correctivo\n",
        "        FROM historicos_ordenes\n",
        "        WHERE tipo_mantenimiento = 'Correctivo'\n",
        "        GROUP BY id_equipo\n",
        "        ORDER BY total_correctivo DESC\n",
        "        LIMIT 1;\n",
        "    \"\"\",\n",
        "    \"temperatura_resumen\": \"\"\"\n",
        "        SELECT id_equipo, AVG(temperatura_c) AS promedio_temp, MAX(temperatura_c) AS max_temp\n",
        "        FROM registros_condiciones\n",
        "        GROUP BY id_equipo;\n",
        "    \"\"\",\n",
        "    \"ordenes_correctivas_equipo\": \"\"\"\n",
        "        SELECT id_orden, id_equipo, costo_mantenimiento, tiempo_reparacion_horas\n",
        "        FROM historicos_ordenes\n",
        "        WHERE tipo_mantenimiento = 'Correctivo' AND id_equipo = %s;\n",
        "    \"\"\",\n",
        "    \"dias_vibracion_temperatura\": \"\"\"\n",
        "        SELECT *\n",
        "        FROM registros_condiciones\n",
        "        WHERE vibracion_mm_s > 3.0 AND temperatura_c > 60;\n",
        "    \"\"\",\n",
        "    \"tiempo_promedio_mantenimiento\": \"\"\"\n",
        "        SELECT id_equipo, AVG(EXTRACT(EPOCH FROM AGE(fecha, LAG(fecha) OVER (PARTITION BY id_equipo ORDER BY fecha)))/3600) AS tiempo_promedio_horas\n",
        "        FROM historicos_ordenes\n",
        "        GROUP BY id_equipo;\n",
        "    \"\"\",\n",
        "    \"suma_horas_acumuladas\": \"\"\"\n",
        "        SELECT id_equipo, SUM(horas_acumuladas) AS total_horas_acumuladas\n",
        "        FROM registros_condiciones\n",
        "        GROUP BY id_equipo;\n",
        "    \"\"\"\n",
        "}\n",
        "\n",
        "\n",
        "sql_queries\n"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejecuta el código (conectar y consultar)**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Ejecución del script\n",
        "if __name__ == \"__main__\":\n",
        "    # Conectar a la base de datos\n",
        "    db_conn = create_database_connection()\n",
        "\n",
        "    # Ejecutar cada consulta\n",
        "    for query_name, query in sql_queries.items():\n",
        "        print(f\"Executing query: {query_name}\")\n",
        "        result = execute_query(db_conn, query)\n",
        "        if result:  # Si la consulta devuelve resultados, imprimirlos\n",
        "            print(result)\n",
        "\n",
        "    # Cerrar la conexión\n",
        "    db_conn.close()\n"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.11",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}