{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Importa las librerías necesarias.**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import psycopg2\n",
        "from psycopg2 import Error # Importar la clase Error\n",
        "from psycopg2 import sql\n",
        "import pandas as pd"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1737118528439
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Se conecta a PostgreSQL.**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Función para conectar al servidor PostgreSQL\n",
        "def create_server_connection():\n",
        "    conn = None\n",
        "    try:\n",
        "        conn = psycopg2.connect(\n",
        "            database=\"datafundamental\", \n",
        "            user=\"datafundamental_owner\", \n",
        "            password=\"uozci0wQGpA6\", \n",
        "            host=\"ep-solitary-ponda2p3evpo.eu-central-1.aws.neon.tech\", \n",
        "            sslmode=\"require\", \n",
        "            port=5432\n",
        "        )\n",
        "        print(\"Database connection successful\")\n",
        "    except psycopg2.OperationalError as err:\n",
        "        print(\"Failed to connect to the database. Please check the following:\")\n",
        "        print(\"- Are the username and password correct?\")\n",
        "        print(\"- Is the host address accurate?\")\n",
        "        print(\"- Is the database accessible with these credentials?\")\n",
        "        print(\"- Additional Error Details:\", err)\n",
        "    return conn"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {
        "gather": {
          "logged": 1737118528916
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Crea la base de datos data_powergen.**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear la base de datos 'data_powergen'\n",
        "def create_database():\n",
        "    conn = create_server_connection()\n",
        "    conn.autocommit = True  # Permitir comandos independientes\n",
        "    try:\n",
        "        with conn.cursor() as cursor:\n",
        "            cursor.execute(\"CREATE DATABASE data_powergen;\")\n",
        "            print(\"Database 'data_powergen' created successfully.\")\n",
        "    except psycopg2.Error as err:\n",
        "        print(f\"Error creating database: {err}\")\n",
        "    finally:\n",
        "        conn.close()"
      ],
      "outputs": [],
      "execution_count": 3,
      "metadata": {
        "gather": {
          "logged": 1737118529333
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Se conecta a la nueva base de datos data_powergen.**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Función para conectar a la base de datos específica\n",
        "def create_database_connection():\n",
        "    conn = None\n",
        "    try:\n",
        "        conn = psycopg2.connect(\n",
        "            database=\"data_powergen\", \n",
        "            user=\"datafundamental_owner\", \n",
        "            password=\"uozci0wQGpA6\", \n",
        "            host=\"ep-solitary-ponda2p3evpo.eu-central-1.aws.neon.tech\", \n",
        "            sslmode=\"require\", \n",
        "            port=5432\n",
        "        )\n",
        "        print(\"Connected to 'data_powergen' successfully.\")\n",
        "    except psycopg2.Error as err:\n",
        "        print(f\"Error: '{err}'\")\n",
        "    return conn"
      ],
      "outputs": [],
      "execution_count": 4,
      "metadata": {
        "gather": {
          "logged": 1737118529812
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Crea las tablas necesarias en la base de datos.**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear tablas en la base de datos\n",
        "def create_tables(conn):\n",
        "    create_historicos_table = \"\"\"\n",
        "    CREATE TABLE IF NOT EXISTS historicos_ordenes (\n",
        "        id_orden VARCHAR PRIMARY KEY,\n",
        "        id_equipo VARCHAR NOT NULL,\n",
        "        fecha DATE NOT NULL,\n",
        "        tipo_mantenimiento VARCHAR NOT NULL,\n",
        "        tiempo_reparacion_horas NUMERIC NOT NULL,\n",
        "        costo_mantenimiento NUMERIC NOT NULL,\n",
        "        ubicacion VARCHAR NOT NULL\n",
        "    );\n",
        "    \"\"\"\n",
        "    create_caracteristicas_table = \"\"\"\n",
        "    CREATE TABLE IF NOT EXISTS caracteristicas_equipos (\n",
        "        id_equipo VARCHAR PRIMARY KEY,\n",
        "        tipo_equipo VARCHAR NOT NULL,\n",
        "        fabricante VARCHAR NOT NULL,\n",
        "        fecha_instalacion DATE NOT NULL,\n",
        "        vida_util_anios NUMERIC NOT NULL,\n",
        "        potencia_kw NUMERIC NOT NULL\n",
        "    );\n",
        "    \"\"\"\n",
        "    create_registros_table = \"\"\"\n",
        "    CREATE TABLE IF NOT EXISTS registros_condiciones (\n",
        "        id_equipo VARCHAR NOT NULL,\n",
        "        fecha DATE NOT NULL,\n",
        "        horas_operativas NUMERIC NOT NULL,\n",
        "        temperatura_c NUMERIC NOT NULL,\n",
        "        vibracion_mm_s NUMERIC NOT NULL,\n",
        "        presion_bar NUMERIC NOT NULL,\n",
        "        horas_acumuladas NUMERIC NOT NULL,\n",
        "        PRIMARY KEY (id_equipo, fecha)\n",
        "    );\n",
        "    \"\"\"\n",
        "    try:\n",
        "        with conn.cursor() as cursor:\n",
        "            cursor.execute(create_historicos_table)\n",
        "            cursor.execute(create_caracteristicas_table)\n",
        "            cursor.execute(create_registros_table)\n",
        "            conn.commit()\n",
        "            print(\"Tables created successfully.\")\n",
        "    except psycopg2.Error as err:\n",
        "        print(f\"Error creating tables: {err}\")"
      ],
      "outputs": [],
      "execution_count": 5,
      "metadata": {
        "gather": {
          "logged": 1737118530288
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Carga los datos desde los archivos csv a PostgreSQL.**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Cargar datos desde CSV a PostgreSQL\n",
        "def load_data_to_postgresql(conn, csv_path, table_name):\n",
        "    \"\"\"Cargar un archivo CSV en una tabla PostgreSQL.\"\"\"\n",
        "    df = pd.read_csv(csv_path)\n",
        "    try:\n",
        "        with conn.cursor() as cursor:\n",
        "            for index, row in df.iterrows():\n",
        "                placeholders = \", \".join([\"%s\"] * len(row))\n",
        "                query = sql.SQL(f\"INSERT INTO {table_name} VALUES ({placeholders})\")\n",
        "                cursor.execute(query, row.values.tolist())\n",
        "        conn.commit()\n",
        "        print(f\"Data loaded successfully into {table_name}.\")\n",
        "    except psycopg2.Error as err:\n",
        "        print(f\"Error loading data: {err}\")"
      ],
      "outputs": [],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1737118530692
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejecución del código.**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Ejecución del script\n",
        "if __name__ == \"__main__\":\n",
        "    # Crear base de datos\n",
        "    create_database()\n",
        "\n",
        "    # Conectar a la base de datos 'data_powergen'\n",
        "    db_conn = create_database_connection()\n",
        "\n",
        "    # Crear tablas\n",
        "    create_tables(db_conn)\n",
        "\n",
        "    # Cargar datos a las tablas\n",
        "    load_data_to_postgresql(db_conn, \"powergen-predictivo/data/Historicos_Ordenes.csv\", \"historicos_ordenes\")\n",
        "    load_data_to_postgresql(db_conn, \"powergen-predictivo/data/Caracteristicas_Equipos.csv\", \"caracteristicas_equipos\")\n",
        "    load_data_to_postgresql(db_conn, \"powergen-predictivo/data/Registros_Condiciones.csv\", \"registros_condiciones\")\n",
        "\n",
        "    db_conn.close()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Failed to connect to the database. Please check the following:\n- Are the username and password correct?\n- Is the host address accurate?\n- Is the database accessible with these credentials?\n- Additional Error Details: connection to server at \"ep-solitary-ponda2p3evpo.eu-central-1.aws.neon.tech\" (3.126.212.11), port 5432 failed: ERROR:  password authentication failed for user 'datafundamental_owner'\n\n"
        },
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'NoneType' object has no attribute 'autocommit'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[7], line 4\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Ejecución del script\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;18m__name__\u001b[39m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__main__\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m      3\u001b[0m     \u001b[38;5;66;03m# Crear base de datos\u001b[39;00m\n\u001b[0;32m----> 4\u001b[0m     \u001b[43mcreate_database\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      6\u001b[0m     \u001b[38;5;66;03m# Conectar a la base de datos 'data_powergen'\u001b[39;00m\n\u001b[1;32m      7\u001b[0m     db_conn \u001b[38;5;241m=\u001b[39m create_database_connection()\n",
            "Cell \u001b[0;32mIn[3], line 4\u001b[0m, in \u001b[0;36mcreate_database\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcreate_database\u001b[39m():\n\u001b[1;32m      3\u001b[0m     conn \u001b[38;5;241m=\u001b[39m create_server_connection()\n\u001b[0;32m----> 4\u001b[0m     \u001b[43mconn\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mautocommit\u001b[49m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m  \u001b[38;5;66;03m# Permitir comandos independientes\u001b[39;00m\n\u001b[1;32m      5\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m      6\u001b[0m         \u001b[38;5;28;01mwith\u001b[39;00m conn\u001b[38;5;241m.\u001b[39mcursor() \u001b[38;5;28;01mas\u001b[39;00m cursor:\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'autocommit'"
          ]
        }
      ],
      "execution_count": 7,
      "metadata": {
        "gather": {
          "logged": 1737118531974
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.11",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "es"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "kernel_info": {
      "name": "python38-azureml"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}